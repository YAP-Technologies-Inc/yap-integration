"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var actions_exports = {};
__export(actions_exports, {
  billingAddressSchema: () => billingAddressSchema,
  cancelSubscriptionSchema: () => cancelSubscriptionSchema,
  createActivateSubscriptionCheckoutSessionSchema: () => createActivateSubscriptionCheckoutSessionSchema,
  createAddPaymentMethodCheckoutSessionSchema: () => createAddPaymentMethodCheckoutSessionSchema,
  createCheckoutSessionSchema: () => createCheckoutSessionSchema,
  createProductCheckoutSessionSchema: () => createProductCheckoutSessionSchema,
  createSubscriptionSchema: () => createSubscriptionSchema,
  createUsageEventSchema: () => createUsageEventSchema,
  flowgladActionValidators: () => flowgladActionValidators,
  updateCustomerInputSchema: () => updateCustomerInputSchema,
  updateCustomerSchema: () => updateCustomerSchema
});
module.exports = __toCommonJS(actions_exports);
var import_zod = require("zod");
var import_types = require("./types");
const createCoreCheckoutSessionSchema = import_zod.z.object({
  successUrl: import_zod.z.string().url(),
  cancelUrl: import_zod.z.string().url(),
  outputMetadata: import_zod.z.record(import_zod.z.string(), import_zod.z.any()).optional(),
  outputName: import_zod.z.string().optional()
});
const createProductCheckoutSessionSchema = createCoreCheckoutSessionSchema.extend({
  type: import_zod.z.literal("product"),
  priceId: import_zod.z.string(),
  quantity: import_zod.z.number().optional().default(1)
});
const createAddPaymentMethodCheckoutSessionSchema = createCoreCheckoutSessionSchema.extend({
  type: import_zod.z.literal("add_payment_method"),
  targetSubscriptionId: import_zod.z.string().optional()
});
const createActivateSubscriptionCheckoutSessionSchema = createCoreCheckoutSessionSchema.extend({
  type: import_zod.z.literal("activate_subscription"),
  targetSubscriptionId: import_zod.z.string(),
  priceId: import_zod.z.string()
});
const createCheckoutSessionSchema = import_zod.z.discriminatedUnion(
  "type",
  [
    createProductCheckoutSessionSchema,
    createAddPaymentMethodCheckoutSessionSchema,
    createActivateSubscriptionCheckoutSessionSchema
  ]
);
const subscriptionCancellationTiming = {
  AtEndOfCurrentBillingPeriod: "at_end_of_current_billing_period",
  AtFutureDate: "at_future_date",
  Immediately: "immediately"
};
const cancellationParametersSchema = import_zod.z.discriminatedUnion("timing", [
  import_zod.z.object({
    timing: import_zod.z.literal(
      subscriptionCancellationTiming.AtEndOfCurrentBillingPeriod
    )
  }),
  import_zod.z.object({
    timing: import_zod.z.literal(subscriptionCancellationTiming.AtFutureDate),
    endDate: import_zod.z.date()
  }),
  import_zod.z.object({
    timing: import_zod.z.literal(subscriptionCancellationTiming.Immediately)
  })
]);
const cancelSubscriptionSchema = import_zod.z.object({
  id: import_zod.z.string(),
  cancellation: cancellationParametersSchema
});
const createUsageEventSchema = import_zod.z.object({
  amount: import_zod.z.number(),
  priceId: import_zod.z.string(),
  subscriptionId: import_zod.z.string(),
  usageMeterId: import_zod.z.string(),
  properties: import_zod.z.record(import_zod.z.string(), import_zod.z.unknown()).nullish(),
  transactionId: import_zod.z.string(),
  usageDate: import_zod.z.number().optional()
});
const createSubscriptionSchema = import_zod.z.object({
  customerId: import_zod.z.string(),
  priceId: import_zod.z.string(),
  quantity: import_zod.z.number().optional(),
  startDate: import_zod.z.string().datetime().optional(),
  trialEnd: import_zod.z.number().optional().describe(
    `Epoch time in milliseconds of when the trial ends. If not provided, defaults to startDate + the associated price's trialPeriodDays`
  ),
  metadata: import_zod.z.record(import_zod.z.string(), import_zod.z.unknown()).optional(),
  name: import_zod.z.string().optional(),
  backupPaymentMethodId: import_zod.z.string().optional(),
  defaultPaymentMethodId: import_zod.z.string().optional(),
  interval: import_zod.z.enum(["day", "week", "month", "year"]).optional(),
  intervalCount: import_zod.z.number().optional()
});
const billingAddressSchema = import_zod.z.object({
  name: import_zod.z.string().optional(),
  firstName: import_zod.z.string().optional(),
  lastName: import_zod.z.string().optional(),
  email: import_zod.z.string().email().optional(),
  address: import_zod.z.object({
    name: import_zod.z.string().optional(),
    line1: import_zod.z.string().nullable(),
    line2: import_zod.z.string().nullable(),
    city: import_zod.z.string().nullable(),
    state: import_zod.z.string().nullable(),
    postal_code: import_zod.z.string().nullable(),
    country: import_zod.z.string()
  }),
  phone: import_zod.z.string().optional()
});
const updateCustomerInputSchema = import_zod.z.object({
  id: import_zod.z.string(),
  name: import_zod.z.string().optional(),
  email: import_zod.z.string().email().optional(),
  phone: import_zod.z.string().optional(),
  billingAddress: billingAddressSchema.optional()
});
const updateCustomerSchema = import_zod.z.object({
  customer: updateCustomerInputSchema,
  externalId: import_zod.z.string()
});
const flowgladActionValidators = {
  [import_types.FlowgladActionKey.GetCustomerBilling]: {
    method: import_types.HTTPMethod.POST,
    inputValidator: import_zod.z.object({
      externalId: import_zod.z.string()
    })
  },
  [import_types.FlowgladActionKey.FindOrCreateCustomer]: {
    method: import_types.HTTPMethod.POST,
    inputValidator: import_zod.z.object({
      externalId: import_zod.z.string()
    })
  },
  [import_types.FlowgladActionKey.CreateCheckoutSession]: {
    method: import_types.HTTPMethod.POST,
    inputValidator: createCheckoutSessionSchema
  },
  [import_types.FlowgladActionKey.CancelSubscription]: {
    method: import_types.HTTPMethod.POST,
    inputValidator: cancelSubscriptionSchema
  },
  [import_types.FlowgladActionKey.CreateSubscription]: {
    method: import_types.HTTPMethod.POST,
    inputValidator: createSubscriptionSchema
  },
  [import_types.FlowgladActionKey.UpdateCustomer]: {
    method: import_types.HTTPMethod.POST,
    inputValidator: updateCustomerSchema
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  billingAddressSchema,
  cancelSubscriptionSchema,
  createActivateSubscriptionCheckoutSessionSchema,
  createAddPaymentMethodCheckoutSessionSchema,
  createCheckoutSessionSchema,
  createProductCheckoutSessionSchema,
  createSubscriptionSchema,
  createUsageEventSchema,
  flowgladActionValidators,
  updateCustomerInputSchema,
  updateCustomerSchema
});
//# sourceMappingURL=actions.js.map