{"version":3,"sources":["../../../src/test/helpers.ts"],"sourcesContent":["import { FlowgladServer } from '../FlowgladServer'\nimport { FlowgladServerAdmin } from '../FlowgladServerAdmin'\nimport { CoreCustomerUser } from '../types'\n\n/**\n * Creates a mock FlowgladServer instance for testing\n */\nexport const createTestFlowgladServer = () => {\n  return new FlowgladServer({\n    baseURL: process.env.FLOWGLAD_BASE_URL || 'http://localhost:3000',\n    getRequestingCustomer: async (): Promise<CoreCustomerUser> => {\n      return {\n        externalId: 'test-user-id',\n        name: 'Test User',\n        email: 'test@example.com',\n      }\n    },\n  })\n}\n\n/**\n * Waits for a specified amount of time\n */\nexport const wait = (ms: number) =>\n  new Promise((resolve) => setTimeout(resolve, ms))\n\n/**\n * Retries a function until it succeeds or the maximum number of retries is reached\n */\nexport const retry = async <T>(\n  fn: () => Promise<T>,\n  maxRetries = 5,\n  delay = 1000\n): Promise<T> => {\n  let lastError: Error | undefined\n\n  for (let i = 0; i < maxRetries; i++) {\n    try {\n      return await fn()\n    } catch (error) {\n      lastError = error as Error\n      if (i < maxRetries - 1) {\n        await wait(delay * (i + 1))\n      }\n    }\n  }\n\n  throw lastError\n}\n\nexport const createTestFlowgladServerAdmin = () => {\n  return new FlowgladServerAdmin({\n    baseURL: process.env.FLOWGLAD_BASE_URL || 'http://localhost:3000',\n  })\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAA+B;AAC/B,iCAAoC;AAM7B,MAAM,2BAA2B,MAAM;AAC5C,SAAO,IAAI,qCAAe;AAAA,IACxB,SAAS,QAAQ,IAAI,qBAAqB;AAAA,IAC1C,uBAAuB,MAAuC;AAC5D,aAAO;AAAA,QACL,YAAY;AAAA,QACZ,MAAM;AAAA,QACN,OAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF,CAAC;AACH;AAKO,MAAM,OAAO,CAAC,OACnB,IAAI,QAAQ,CAAC,YAAY,WAAW,SAAS,EAAE,CAAC;AAK3C,MAAM,QAAQ,CACnB,IACA,aAAa,GACb,QAAQ,QACO;AACf,MAAI;AAEJ,WAAS,IAAI,GAAG,IAAI,YAAY,KAAK;AACnC,QAAI;AACF,aAAO,MAAM,GAAG;AAAA,IAClB,SAAS,OAAO;AACd,kBAAY;AACZ,UAAI,IAAI,aAAa,GAAG;AACtB,cAAM,KAAK,SAAS,IAAI,EAAE;AAAA,MAC5B;AAAA,IACF;AAAA,EACF;AAEA,QAAM;AACR;AAEO,MAAM,gCAAgC,MAAM;AACjD,SAAO,IAAI,+CAAoB;AAAA,IAC7B,SAAS,QAAQ,IAAI,qBAAqB;AAAA,EAC5C,CAAC;AACH;","names":[]}