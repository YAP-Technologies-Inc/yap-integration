"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var customerHandlers_exports = {};
__export(customerHandlers_exports, {
  findOrCreateCustomer: () => findOrCreateCustomer,
  getCustomerBilling: () => getCustomerBilling,
  updateCustomer: () => updateCustomer
});
module.exports = __toCommonJS(customerHandlers_exports);
var import_shared = require("@flowglad/shared");
const getCustomerBilling = (params, flowgladServer) => __async(void 0, null, function* () {
  if (params.method !== import_shared.HTTPMethod.POST) {
    return {
      data: {},
      status: 405,
      error: {
        code: "Method not allowed",
        json: {}
      }
    };
  }
  const customerBilling = yield flowgladServer.getBilling();
  return {
    data: customerBilling,
    status: 200
  };
});
const findOrCreateCustomer = (params, flowgladServer) => __async(void 0, null, function* () {
  if (params.method !== import_shared.HTTPMethod.POST) {
    return {
      data: {},
      status: 405,
      error: {
        code: "405",
        json: {
          message: "Method not allowed"
        }
      }
    };
  }
  const user = yield flowgladServer.getSession();
  if (!user) {
    return {
      data: {},
      status: 401,
      error: {
        code: "401",
        json: {
          message: "Unauthorized"
        }
      }
    };
  }
  let customer;
  const requestingcustomerId = yield flowgladServer.getRequestingCustomerId();
  try {
    customer = yield flowgladServer.getCustomer();
  } catch (error) {
    if (error.error.code === "NOT_FOUND") {
      customer = yield flowgladServer.createCustomer({
        customer: {
          email: user.email,
          name: user.name,
          externalId: requestingcustomerId
        }
      });
    }
  }
  if (!customer) {
    return {
      data: {},
      status: 404,
      error: {
        code: "404",
        json: {
          message: `Customer ${requestingcustomerId} not found`
        }
      }
    };
  }
  return {
    data: customer,
    status: 200
  };
});
const updateCustomer = (params, flowgladServer) => __async(void 0, null, function* () {
  if (params.method !== import_shared.HTTPMethod.POST) {
    return {
      data: {},
      status: 405,
      error: {
        code: "405",
        json: {
          message: "Method not allowed"
        }
      }
    };
  }
  const parsedParams = import_shared.updateCustomerSchema.parse(params.data);
  const customer = yield flowgladServer.updateCustomer(parsedParams);
  return {
    data: customer,
    status: 200
  };
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  findOrCreateCustomer,
  getCustomerBilling,
  updateCustomer
});
//# sourceMappingURL=customerHandlers.js.map