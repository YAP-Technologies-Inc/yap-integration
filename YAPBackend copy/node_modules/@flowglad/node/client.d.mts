import type { RequestInit, RequestInfo } from "./internal/builtin-types.mjs";
import type { PromiseOrValue, MergedRequestInit, FinalizedRequestInit } from "./internal/types.mjs";
export type { Logger, LogLevel } from "./internal/utils/log.mjs";
import * as Opts from "./internal/request-options.mjs";
import * as Errors from "./core/error.mjs";
import * as Uploads from "./core/uploads.mjs";
import * as API from "./resources/index.mjs";
import { APIPromise } from "./core/api-promise.mjs";
import { CatalogCloneParams, CatalogCloneResponse, CatalogCreateParams, CatalogCreateResponse, CatalogListParams, CatalogListResponse, CatalogRetrieveDefaultResponse, CatalogRetrieveResponse, CatalogUpdateParams, CatalogUpdateResponse, Catalogs } from "./resources/catalogs.mjs";
import { CheckoutSessionCreateParams, CheckoutSessionCreateResponse, CheckoutSessionListParams, CheckoutSessionListResponse, CheckoutSessionRetrieveResponse, CheckoutSessions } from "./resources/checkout-sessions.mjs";
import { CustomerCreateParams, CustomerCreateResponse, CustomerListParams, CustomerListResponse, CustomerRetrieveBillingResponse, CustomerRetrieveResponse, CustomerUpdateParams, CustomerUpdateResponse, Customers } from "./resources/customers.mjs";
import { DiscountCreateParams, DiscountCreateResponse, DiscountListParams, DiscountListResponse, DiscountRetrieveResponse, DiscountUpdateParams, DiscountUpdateResponse, Discounts } from "./resources/discounts.mjs";
import { InvoiceLineItemListParams, InvoiceLineItemListResponse, InvoiceLineItemRetrieveResponse, InvoiceLineItems } from "./resources/invoice-line-items.mjs";
import { InvoiceCreateParams, InvoiceCreateResponse, InvoiceListParams, InvoiceListResponse, InvoiceRetrieveResponse, Invoices } from "./resources/invoices.mjs";
import { PaymentMethodListParams, PaymentMethodListResponse, PaymentMethodRetrieveResponse, PaymentMethods } from "./resources/payment-methods.mjs";
import { PaymentListParams, PaymentListResponse, PaymentRefundParams, PaymentRefundResponse, PaymentRetrieveResponse, Payments } from "./resources/payments.mjs";
import { PriceCreateParams, PriceCreateResponse, PriceListParams, PriceListResponse, PriceUpdateParams, PriceUpdateResponse, Prices } from "./resources/prices.mjs";
import { ProductCreateParams, ProductCreateResponse, ProductListParams, ProductListResponse, ProductRetrieveResponse, ProductUpdateParams, ProductUpdateResponse, Products } from "./resources/products.mjs";
import { SubscriptionAdjustParams, SubscriptionAdjustResponse, SubscriptionCancelParams, SubscriptionCancelResponse, SubscriptionCreateParams, SubscriptionCreateResponse, SubscriptionListParams, SubscriptionListResponse, SubscriptionRetrieveResponse, Subscriptions } from "./resources/subscriptions.mjs";
import { UsageEventCreateParams, UsageEventCreateResponse, UsageEventRetrieveResponse, UsageEvents } from "./resources/usage-events.mjs";
import { UsageMeterCreateParams, UsageMeterCreateResponse, UsageMeterListParams, UsageMeterListResponse, UsageMeterRetrieveResponse, UsageMeterUpdateParams, UsageMeterUpdateResponse, UsageMeters } from "./resources/usage-meters.mjs";
import { type Fetch } from "./internal/builtin-types.mjs";
import { HeadersLike, NullableHeaders } from "./internal/headers.mjs";
import { FinalRequestOptions, RequestOptions } from "./internal/request-options.mjs";
import { type LogLevel, type Logger } from "./internal/utils/log.mjs";
export interface ClientOptions {
    /**
     * API key for accessing the Flowglad API
     */
    apiKey?: string | undefined;
    /**
     * Override the default base URL for the API, e.g., "https://api.example.com/v2/"
     *
     * Defaults to process.env['FLOWGLAD_BASE_URL'].
     */
    baseURL?: string | null | undefined;
    /**
     * The maximum amount of time (in milliseconds) that the client should wait for a response
     * from the server before timing out a single request.
     *
     * Note that request timeouts are retried by default, so in a worst-case scenario you may wait
     * much longer than this timeout before the promise succeeds or fails.
     */
    timeout?: number | undefined;
    /**
     * Additional `RequestInit` options to be passed to `fetch` calls.
     * Properties will be overridden by per-request `fetchOptions`.
     */
    fetchOptions?: MergedRequestInit | undefined;
    /**
     * Specify a custom `fetch` function implementation.
     *
     * If not provided, we expect that `fetch` is defined globally.
     */
    fetch?: Fetch | undefined;
    /**
     * The maximum number of times that the client will retry a request in case of a
     * temporary failure, like a network error or a 5XX error from the server.
     *
     * @default 2
     */
    maxRetries?: number | undefined;
    /**
     * Default headers to include with every request to the API.
     *
     * These can be removed in individual requests by explicitly setting the
     * header to `null` in request options.
     */
    defaultHeaders?: HeadersLike | undefined;
    /**
     * Default query parameters to include with every request to the API.
     *
     * These can be removed in individual requests by explicitly setting the
     * param to `undefined` in request options.
     */
    defaultQuery?: Record<string, string | undefined> | undefined;
    /**
     * Set the log level.
     *
     * Defaults to process.env['FLOWGLAD_LOG'] or 'warn' if it isn't set.
     */
    logLevel?: LogLevel | undefined;
    /**
     * Set the logger.
     *
     * Defaults to globalThis.console.
     */
    logger?: Logger | undefined;
}
/**
 * API Client for interfacing with the Flowglad API.
 */
export declare class Flowglad {
    #private;
    apiKey: string;
    baseURL: string;
    maxRetries: number;
    timeout: number;
    logger: Logger | undefined;
    logLevel: LogLevel | undefined;
    fetchOptions: MergedRequestInit | undefined;
    private fetch;
    protected idempotencyHeader?: string;
    private _options;
    /**
     * API Client for interfacing with the Flowglad API.
     *
     * @param {string | undefined} [opts.apiKey=process.env['FLOWGLAD_SECRET_KEY'] ?? undefined]
     * @param {string} [opts.baseURL=process.env['FLOWGLAD_BASE_URL'] ?? https://app.flowglad.com/] - Override the default base URL for the API.
     * @param {number} [opts.timeout=1 minute] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.
     * @param {MergedRequestInit} [opts.fetchOptions] - Additional `RequestInit` options to be passed to `fetch` calls.
     * @param {Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.
     * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.
     * @param {HeadersLike} opts.defaultHeaders - Default headers to include with every request to the API.
     * @param {Record<string, string | undefined>} opts.defaultQuery - Default query parameters to include with every request to the API.
     */
    constructor({ baseURL, apiKey, ...opts }?: ClientOptions);
    /**
     * Create a new client instance re-using the same options given to the current client with optional overriding.
     */
    withOptions(options: Partial<ClientOptions>): this;
    protected defaultQuery(): Record<string, string | undefined> | undefined;
    protected validateHeaders({ values, nulls }: NullableHeaders): void;
    protected authHeaders(opts: FinalRequestOptions): NullableHeaders | undefined;
    /**
     * Basic re-implementation of `qs.stringify` for primitive types.
     */
    protected stringifyQuery(query: Record<string, unknown>): string;
    private getUserAgent;
    protected defaultIdempotencyKey(): string;
    protected makeStatusError(status: number, error: Object, message: string | undefined, headers: Headers): Errors.APIError;
    buildURL(path: string, query: Record<string, unknown> | null | undefined, defaultBaseURL?: string | undefined): string;
    /**
     * Used as a callback for mutating the given `FinalRequestOptions` object.
     */
    protected prepareOptions(options: FinalRequestOptions): Promise<void>;
    /**
     * Used as a callback for mutating the given `RequestInit` object.
     *
     * This is useful for cases where you want to add certain headers based off of
     * the request properties, e.g. `method` or `url`.
     */
    protected prepareRequest(request: RequestInit, { url, options }: {
        url: string;
        options: FinalRequestOptions;
    }): Promise<void>;
    get<Rsp>(path: string, opts?: PromiseOrValue<RequestOptions>): APIPromise<Rsp>;
    post<Rsp>(path: string, opts?: PromiseOrValue<RequestOptions>): APIPromise<Rsp>;
    patch<Rsp>(path: string, opts?: PromiseOrValue<RequestOptions>): APIPromise<Rsp>;
    put<Rsp>(path: string, opts?: PromiseOrValue<RequestOptions>): APIPromise<Rsp>;
    delete<Rsp>(path: string, opts?: PromiseOrValue<RequestOptions>): APIPromise<Rsp>;
    private methodRequest;
    request<Rsp>(options: PromiseOrValue<FinalRequestOptions>, remainingRetries?: number | null): APIPromise<Rsp>;
    private makeRequest;
    fetchWithTimeout(url: RequestInfo, init: RequestInit | undefined, ms: number, controller: AbortController): Promise<Response>;
    private shouldRetry;
    private retryRequest;
    private calculateDefaultRetryTimeoutMillis;
    buildRequest(inputOptions: FinalRequestOptions, { retryCount }?: {
        retryCount?: number;
    }): {
        req: FinalizedRequestInit;
        url: string;
        timeout: number;
    };
    private buildHeaders;
    private buildBody;
    static Flowglad: typeof Flowglad;
    static DEFAULT_TIMEOUT: number;
    static FlowgladError: typeof Errors.FlowgladError;
    static APIError: typeof Errors.APIError;
    static APIConnectionError: typeof Errors.APIConnectionError;
    static APIConnectionTimeoutError: typeof Errors.APIConnectionTimeoutError;
    static APIUserAbortError: typeof Errors.APIUserAbortError;
    static NotFoundError: typeof Errors.NotFoundError;
    static ConflictError: typeof Errors.ConflictError;
    static RateLimitError: typeof Errors.RateLimitError;
    static BadRequestError: typeof Errors.BadRequestError;
    static AuthenticationError: typeof Errors.AuthenticationError;
    static InternalServerError: typeof Errors.InternalServerError;
    static PermissionDeniedError: typeof Errors.PermissionDeniedError;
    static UnprocessableEntityError: typeof Errors.UnprocessableEntityError;
    static toFile: typeof Uploads.toFile;
    invoices: API.Invoices;
    invoiceLineItems: API.InvoiceLineItems;
    catalogs: API.Catalogs;
    checkoutSessions: API.CheckoutSessions;
    products: API.Products;
    prices: API.Prices;
    discounts: API.Discounts;
    customers: API.Customers;
    payments: API.Payments;
    paymentMethods: API.PaymentMethods;
    subscriptions: API.Subscriptions;
    usageEvents: API.UsageEvents;
    usageMeters: API.UsageMeters;
}
export declare namespace Flowglad {
    export type RequestOptions = Opts.RequestOptions;
    export { Invoices as Invoices, type InvoiceCreateResponse as InvoiceCreateResponse, type InvoiceRetrieveResponse as InvoiceRetrieveResponse, type InvoiceListResponse as InvoiceListResponse, type InvoiceCreateParams as InvoiceCreateParams, type InvoiceListParams as InvoiceListParams, };
    export { InvoiceLineItems as InvoiceLineItems, type InvoiceLineItemRetrieveResponse as InvoiceLineItemRetrieveResponse, type InvoiceLineItemListResponse as InvoiceLineItemListResponse, type InvoiceLineItemListParams as InvoiceLineItemListParams, };
    export { Catalogs as Catalogs, type CatalogCreateResponse as CatalogCreateResponse, type CatalogRetrieveResponse as CatalogRetrieveResponse, type CatalogUpdateResponse as CatalogUpdateResponse, type CatalogListResponse as CatalogListResponse, type CatalogCloneResponse as CatalogCloneResponse, type CatalogRetrieveDefaultResponse as CatalogRetrieveDefaultResponse, type CatalogCreateParams as CatalogCreateParams, type CatalogUpdateParams as CatalogUpdateParams, type CatalogListParams as CatalogListParams, type CatalogCloneParams as CatalogCloneParams, };
    export { CheckoutSessions as CheckoutSessions, type CheckoutSessionCreateResponse as CheckoutSessionCreateResponse, type CheckoutSessionRetrieveResponse as CheckoutSessionRetrieveResponse, type CheckoutSessionListResponse as CheckoutSessionListResponse, type CheckoutSessionCreateParams as CheckoutSessionCreateParams, type CheckoutSessionListParams as CheckoutSessionListParams, };
    export { Products as Products, type ProductCreateResponse as ProductCreateResponse, type ProductRetrieveResponse as ProductRetrieveResponse, type ProductUpdateResponse as ProductUpdateResponse, type ProductListResponse as ProductListResponse, type ProductCreateParams as ProductCreateParams, type ProductUpdateParams as ProductUpdateParams, type ProductListParams as ProductListParams, };
    export { Prices as Prices, type PriceCreateResponse as PriceCreateResponse, type PriceUpdateResponse as PriceUpdateResponse, type PriceListResponse as PriceListResponse, type PriceCreateParams as PriceCreateParams, type PriceUpdateParams as PriceUpdateParams, type PriceListParams as PriceListParams, };
    export { Discounts as Discounts, type DiscountCreateResponse as DiscountCreateResponse, type DiscountRetrieveResponse as DiscountRetrieveResponse, type DiscountUpdateResponse as DiscountUpdateResponse, type DiscountListResponse as DiscountListResponse, type DiscountCreateParams as DiscountCreateParams, type DiscountUpdateParams as DiscountUpdateParams, type DiscountListParams as DiscountListParams, };
    export { Customers as Customers, type CustomerCreateResponse as CustomerCreateResponse, type CustomerRetrieveResponse as CustomerRetrieveResponse, type CustomerUpdateResponse as CustomerUpdateResponse, type CustomerListResponse as CustomerListResponse, type CustomerRetrieveBillingResponse as CustomerRetrieveBillingResponse, type CustomerCreateParams as CustomerCreateParams, type CustomerUpdateParams as CustomerUpdateParams, type CustomerListParams as CustomerListParams, };
    export { Payments as Payments, type PaymentRetrieveResponse as PaymentRetrieveResponse, type PaymentListResponse as PaymentListResponse, type PaymentRefundResponse as PaymentRefundResponse, type PaymentListParams as PaymentListParams, type PaymentRefundParams as PaymentRefundParams, };
    export { PaymentMethods as PaymentMethods, type PaymentMethodRetrieveResponse as PaymentMethodRetrieveResponse, type PaymentMethodListResponse as PaymentMethodListResponse, type PaymentMethodListParams as PaymentMethodListParams, };
    export { Subscriptions as Subscriptions, type SubscriptionCreateResponse as SubscriptionCreateResponse, type SubscriptionRetrieveResponse as SubscriptionRetrieveResponse, type SubscriptionListResponse as SubscriptionListResponse, type SubscriptionAdjustResponse as SubscriptionAdjustResponse, type SubscriptionCancelResponse as SubscriptionCancelResponse, type SubscriptionCreateParams as SubscriptionCreateParams, type SubscriptionListParams as SubscriptionListParams, type SubscriptionAdjustParams as SubscriptionAdjustParams, type SubscriptionCancelParams as SubscriptionCancelParams, };
    export { UsageEvents as UsageEvents, type UsageEventCreateResponse as UsageEventCreateResponse, type UsageEventRetrieveResponse as UsageEventRetrieveResponse, type UsageEventCreateParams as UsageEventCreateParams, };
    export { UsageMeters as UsageMeters, type UsageMeterCreateResponse as UsageMeterCreateResponse, type UsageMeterRetrieveResponse as UsageMeterRetrieveResponse, type UsageMeterUpdateResponse as UsageMeterUpdateResponse, type UsageMeterListResponse as UsageMeterListResponse, type UsageMeterCreateParams as UsageMeterCreateParams, type UsageMeterUpdateParams as UsageMeterUpdateParams, type UsageMeterListParams as UsageMeterListParams, };
}
//# sourceMappingURL=client.d.mts.map