{"version":3,"sources":["../../src/types.ts"],"sourcesContent":["import type { Flowglad as FlowgladNode } from '@flowglad/node'\n\nexport enum FlowgladActionKey {\n  GetCustomerBilling = 'customers/billing',\n  FindOrCreateCustomer = 'customers/find-or-create',\n  CreateCheckoutSession = 'checkout-sessions/create',\n  CancelSubscription = 'subscriptions/cancel',\n  CreateSubscription = 'subscriptions/create',\n  UpdateCustomer = 'customers/update',\n}\n\nexport enum HTTPMethod {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  PATCH = 'PATCH',\n  DELETE = 'DELETE',\n}\n\nexport interface FeatureItem {\n  id: string\n  livemode: boolean\n  slug: string\n  name: string\n  type: 'toggle' | 'usage_credit_grant'\n  amount: number\n  usageMeterId: string\n  renewalFrequency: 'once' | 'every_billing_period'\n  expiredAt: string | null\n  detachedAt: string | null\n  detachedReason: string | null\n}\n\nexport interface UsageMeterBalance {\n  id: string\n  livemode: boolean\n  name: string\n  slug: string\n  availableBalance: number\n  subscriptionId: string\n}\n\nexport type CustomerRetrieveBillingResponse =\n  FlowgladNode.Customers.CustomerRetrieveBillingResponse\n\nexport type BillingWithChecks = CustomerRetrieveBillingResponse & {\n  /**\n   * @experimental\n   * Checks if a feature is accessible for a given subscription, based on the feature's slug\n   * @param featureSlug - The slug of the feature to check access for\n   * @param refinementParams - Optional refinement parameters to further refine the check. If not provided, defaults check to first current subscription\n   * @returns True if the feature is accessible, false otherwise\n   */\n  checkFeatureAccess: (\n    featureSlug: string,\n    refinementParams?: {\n      subscriptionId?: string\n    }\n  ) => boolean\n  /**\n   * @experimental\n   * Checks the available balance for a given usage meter, based on the usage meter's slug\n   * @param usageMeterSlug - The slug of the usage meter to check the balance for\n   * @param refinementParams - Optional refinement parameters to further refine the check. If not provided, defaults check to first current subscription\n   * @returns The available balance for the usage meter, or null if the usage meter is not found\n   */\n  checkUsageBalance: (\n    usageMeterSlug: string,\n    refinementParams?: {\n      subscriptionId?: string\n    }\n  ) => {\n    availableBalance: number\n  } | null\n\n  /**\n   * @experimental\n   * Gets a product from the catalog\n   * @param productSlug - The slug of the product to get\n   * @returns The product, or null if the product is not found\n   */\n  getProduct: (\n    productSlug: string\n  ) =>\n    | CustomerRetrieveBillingResponse['catalog']['products'][number]\n    | null\n\n  /**\n   * @experimental\n   * Gets a price from the catalog\n   * @param priceSlug - The slug of the price to get\n   * @returns The price, or null if the price is not found\n   */\n  getPrice: (\n    priceSlug: string\n  ) =>\n    | CustomerRetrieveBillingResponse['catalog']['products'][number]['prices'][number]\n    | null\n}\n\nexport type SubscriptionExperimentalFields =\n  FlowgladNode.CustomerRetrieveBillingResponse.SubscriptionItem.Experimental\n"],"mappings":"AAEO,IAAK,oBAAL,kBAAKA,uBAAL;AACL,EAAAA,mBAAA,wBAAqB;AACrB,EAAAA,mBAAA,0BAAuB;AACvB,EAAAA,mBAAA,2BAAwB;AACxB,EAAAA,mBAAA,wBAAqB;AACrB,EAAAA,mBAAA,wBAAqB;AACrB,EAAAA,mBAAA,oBAAiB;AANP,SAAAA;AAAA,GAAA;AASL,IAAK,aAAL,kBAAKC,gBAAL;AACL,EAAAA,YAAA,SAAM;AACN,EAAAA,YAAA,UAAO;AACP,EAAAA,YAAA,SAAM;AACN,EAAAA,YAAA,WAAQ;AACR,EAAAA,YAAA,YAAS;AALC,SAAAA;AAAA,GAAA;","names":["FlowgladActionKey","HTTPMethod"]}