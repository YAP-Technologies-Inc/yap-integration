events { worker_connections 1024; }

http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;
  sendfile      on;
  client_max_body_size 25m;

  upstream frontend { server frontend:3000; }
  upstream backend  { server backend:4000; }

  map $http_upgrade $connection_upgrade { default upgrade; '' close; }

  # HTTP -> HTTPS
  server {
    listen 80;
    server_name dev.yapapp.io;
    return 301 https://$host$request_uri;
  }
  server {
    listen 80;
    server_name api.dev.yapapp.io;
    return 301 https://$host$request_uri;
  }

  # ---- HTTPS: Frontend (dev.yapapp.io) ----
  server {
    listen 443 ssl http2;
    server_name dev.yapapp.io;

    ssl_certificate     /etc/letsencrypt/live/dev.yapapp.io/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/dev.yapapp.io/privkey.pem;
    ssl_protocols       TLSv1.2 TLSv1.3;

    # optional hardening
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;

    location / {
      proxy_pass         http://frontend;
      proxy_http_version 1.1;
      proxy_set_header   Upgrade $http_upgrade;
      proxy_set_header   Connection $connection_upgrade;
      proxy_set_header   Host $host;
      proxy_set_header   X-Real-IP $remote_addr;
      proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header   X-Forwarded-Proto $scheme;
      proxy_read_timeout 600s;
    }

    location /health { access_log off; default_type text/plain; return 200 "healthy\n"; }
  }

  # ---- HTTPS: API (api.dev.yapapp.io) ----
  server {
    listen 443 ssl http2;
    server_name api.dev.yapapp.io;

    ssl_certificate     /etc/letsencrypt/live/api.dev.yapapp.io/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/api.dev.yapapp.io/privkey.pem;
    ssl_protocols       TLSv1.2 TLSv1.3;

    location / {
      # CORS (no cookies yet -> wildcard OK)
      add_header Access-Control-Allow-Origin "*" always;
      add_header Access-Control-Allow-Methods "GET,POST,PUT,PATCH,DELETE,OPTIONS" always;
      add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With, Accept, Origin, If-Modified-Since, Cache-Control, Range, DNT, User-Agent" always;

      # Preflight: no headers inside the 'if' (Nginx rule)
      if ($request_method = OPTIONS) { return 204; }

      proxy_pass         http://backend;
      proxy_http_version 1.1;
      proxy_set_header   Upgrade $http_upgrade;
      proxy_set_header   Connection $connection_upgrade;
      proxy_set_header   Host $host;
      proxy_set_header   X-Real-IP $remote_addr;
      proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header   X-Forwarded-Proto $scheme;
      proxy_read_timeout 600s;
    }

    location /health { access_log off; default_type text/plain; return 200 "healthy\n"; }
  }
}
