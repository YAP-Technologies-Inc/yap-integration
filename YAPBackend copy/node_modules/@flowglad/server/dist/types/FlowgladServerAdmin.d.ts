import { Flowglad as FlowgladNode, ClientOptions } from '@flowglad/node';
export declare class FlowgladServerAdmin {
    private flowgladNode;
    constructor(options: ClientOptions);
    createCustomer(input: FlowgladNode.Customers.CustomerCreateParams): Promise<FlowgladNode.Customers.CustomerCreateResponse>;
    getCustomer(externalId: string): Promise<FlowgladNode.Customers.CustomerRetrieveResponse>;
    getCustomerBilling(externalId: string): Promise<FlowgladNode.Customers.CustomerRetrieveBillingResponse>;
    updateCustomer(id: string, input: FlowgladNode.Customers.CustomerUpdateParams): Promise<FlowgladNode.Customers.CustomerUpdateResponse>;
    getCatalog(id: string): Promise<FlowgladNode.Catalogs.CatalogRetrieveResponse>;
    getDefaultCatalog(): Promise<FlowgladNode.Catalogs.CatalogRetrieveDefaultResponse>;
    createCatalog(input: FlowgladNode.Catalogs.CatalogCreateParams): Promise<FlowgladNode.Catalogs.CatalogCreateResponse>;
    updateCatalog(id: string, input: FlowgladNode.Catalogs.CatalogUpdateParams): Promise<FlowgladNode.Catalogs.CatalogUpdateResponse>;
    createProduct(input: FlowgladNode.Products.ProductCreateParams): Promise<FlowgladNode.Products.ProductCreateResponse>;
    updateProduct(id: string, input: FlowgladNode.Products.ProductUpdateParams): Promise<FlowgladNode.Products.ProductUpdateResponse>;
    cloneCatalog(id: string, params: FlowgladNode.Catalogs.CatalogCloneParams): Promise<FlowgladNode.Catalogs.CatalogCloneResponse>;
    getCatalogWithProductsAndUsageMeters(id: string): Promise<FlowgladNode.Catalogs.CatalogRetrieveResponse>;
    getUsageMeters(params: FlowgladNode.UsageMeters.UsageMeterListParams): Promise<FlowgladNode.UsageMeters.UsageMeterListResponse>;
    getUsageMeter(id: string): Promise<FlowgladNode.UsageMeters.UsageMeterRetrieveResponse>;
    updateUsageMeter(id: string, params: FlowgladNode.UsageMeters.UsageMeterUpdateParams): Promise<FlowgladNode.UsageMeters.UsageMeterUpdateResponse>;
    createUsageMeter(params: FlowgladNode.UsageMeters.UsageMeterCreateParams): Promise<FlowgladNode.UsageMeters.UsageMeterCreateResponse>;
    createUsageEvent(params: FlowgladNode.UsageEvents.UsageEventCreateParams): Promise<FlowgladNode.UsageEvents.UsageEventCreateResponse>;
    getUsageEvent(id: string): Promise<FlowgladNode.UsageEvents.UsageEventRetrieveResponse>;
}
