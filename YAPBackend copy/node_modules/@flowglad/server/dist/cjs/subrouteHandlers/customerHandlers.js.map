{"version":3,"sources":["../../../src/subrouteHandlers/customerHandlers.ts"],"sourcesContent":["import { FlowgladServer } from '../FlowgladServer'\nimport {\n  FlowgladActionKey,\n  HTTPMethod,\n  updateCustomerSchema,\n} from '@flowglad/shared'\nimport type { SubRouteHandler } from './types'\n\nexport const getCustomerBilling: SubRouteHandler<\n  FlowgladActionKey.GetCustomerBilling\n> = async (params, flowgladServer: FlowgladServer) => {\n  if (params.method !== HTTPMethod.POST) {\n    return {\n      data: {},\n      status: 405,\n      error: {\n        code: 'Method not allowed',\n        json: {},\n      },\n    }\n  }\n  const customerBilling = await flowgladServer.getBilling()\n  return {\n    data: customerBilling,\n    status: 200,\n  }\n}\n\nexport const findOrCreateCustomer: SubRouteHandler<\n  FlowgladActionKey.FindOrCreateCustomer\n> = async (params, flowgladServer: FlowgladServer) => {\n  if (params.method !== HTTPMethod.POST) {\n    return {\n      data: {},\n      status: 405,\n      error: {\n        code: '405',\n        json: {\n          message: 'Method not allowed',\n        },\n      },\n    }\n  }\n  const user = await flowgladServer.getSession()\n  if (!user) {\n    return {\n      data: {},\n      status: 401,\n      error: {\n        code: '401',\n        json: {\n          message: 'Unauthorized',\n        },\n      },\n    }\n  }\n  let customer\n  const requestingcustomerId =\n    await flowgladServer.getRequestingCustomerId()\n  try {\n    customer = await flowgladServer.getCustomer()\n  } catch (error) {\n    if ((error as any).error.code === 'NOT_FOUND') {\n      customer = await flowgladServer.createCustomer({\n        customer: {\n          email: user.email,\n          name: user.name,\n          externalId: requestingcustomerId,\n        },\n      })\n    }\n  }\n  if (!customer) {\n    return {\n      data: {},\n      status: 404,\n      error: {\n        code: '404',\n        json: {\n          message: `Customer ${requestingcustomerId} not found`,\n        },\n      },\n    }\n  }\n  return {\n    data: customer,\n    status: 200,\n  }\n}\n\nexport const updateCustomer: SubRouteHandler<\n  FlowgladActionKey.UpdateCustomer\n> = async (params, flowgladServer: FlowgladServer) => {\n  if (params.method !== HTTPMethod.POST) {\n    return {\n      data: {},\n      status: 405,\n      error: {\n        code: '405',\n        json: {\n          message: 'Method not allowed',\n        },\n      },\n    }\n  }\n  const parsedParams = updateCustomerSchema.parse(params.data)\n  const customer = await flowgladServer.updateCustomer(parsedParams)\n  return {\n    data: customer,\n    status: 200,\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,oBAIO;AAGA,MAAM,qBAET,CAAO,QAAQ,mBAAmC;AACpD,MAAI,OAAO,WAAW,yBAAW,MAAM;AACrC,WAAO;AAAA,MACL,MAAM,CAAC;AAAA,MACP,QAAQ;AAAA,MACR,OAAO;AAAA,QACL,MAAM;AAAA,QACN,MAAM,CAAC;AAAA,MACT;AAAA,IACF;AAAA,EACF;AACA,QAAM,kBAAkB,MAAM,eAAe,WAAW;AACxD,SAAO;AAAA,IACL,MAAM;AAAA,IACN,QAAQ;AAAA,EACV;AACF;AAEO,MAAM,uBAET,CAAO,QAAQ,mBAAmC;AACpD,MAAI,OAAO,WAAW,yBAAW,MAAM;AACrC,WAAO;AAAA,MACL,MAAM,CAAC;AAAA,MACP,QAAQ;AAAA,MACR,OAAO;AAAA,QACL,MAAM;AAAA,QACN,MAAM;AAAA,UACJ,SAAS;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACA,QAAM,OAAO,MAAM,eAAe,WAAW;AAC7C,MAAI,CAAC,MAAM;AACT,WAAO;AAAA,MACL,MAAM,CAAC;AAAA,MACP,QAAQ;AAAA,MACR,OAAO;AAAA,QACL,MAAM;AAAA,QACN,MAAM;AAAA,UACJ,SAAS;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACA,MAAI;AACJ,QAAM,uBACJ,MAAM,eAAe,wBAAwB;AAC/C,MAAI;AACF,eAAW,MAAM,eAAe,YAAY;AAAA,EAC9C,SAAS,OAAO;AACd,QAAK,MAAc,MAAM,SAAS,aAAa;AAC7C,iBAAW,MAAM,eAAe,eAAe;AAAA,QAC7C,UAAU;AAAA,UACR,OAAO,KAAK;AAAA,UACZ,MAAM,KAAK;AAAA,UACX,YAAY;AAAA,QACd;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF;AACA,MAAI,CAAC,UAAU;AACb,WAAO;AAAA,MACL,MAAM,CAAC;AAAA,MACP,QAAQ;AAAA,MACR,OAAO;AAAA,QACL,MAAM;AAAA,QACN,MAAM;AAAA,UACJ,SAAS,YAAY,oBAAoB;AAAA,QAC3C;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACA,SAAO;AAAA,IACL,MAAM;AAAA,IACN,QAAQ;AAAA,EACV;AACF;AAEO,MAAM,iBAET,CAAO,QAAQ,mBAAmC;AACpD,MAAI,OAAO,WAAW,yBAAW,MAAM;AACrC,WAAO;AAAA,MACL,MAAM,CAAC;AAAA,MACP,QAAQ;AAAA,MACR,OAAO;AAAA,QACL,MAAM;AAAA,QACN,MAAM;AAAA,UACJ,SAAS;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACA,QAAM,eAAe,mCAAqB,MAAM,OAAO,IAAI;AAC3D,QAAM,WAAW,MAAM,eAAe,eAAe,YAAY;AACjE,SAAO;AAAA,IACL,MAAM;AAAA,IACN,QAAQ;AAAA,EACV;AACF;","names":[]}