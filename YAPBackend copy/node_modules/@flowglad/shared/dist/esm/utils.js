const IS_DEV = process.env.NODE_ENV === "development";
const getBaseURL = () => {
  if (IS_DEV && process.env.FLOWGLAD_API_URL_OVERRIDE) {
    return process.env.FLOWGLAD_API_URL_OVERRIDE;
  }
  return "https://app.flowglad.com";
};
const constructCheckFeatureAccess = (subscriptions) => {
  return (featureSlug, refinementParams) => {
    var _a;
    const subscription = (refinementParams == null ? void 0 : refinementParams.subscriptionId) ? subscriptions.find(
      (s) => s.id === refinementParams.subscriptionId
    ) : subscriptions[0];
    if (!subscription) {
      return false;
    }
    const experimental = subscription.experimental;
    const featureItemsBySlug = (_a = experimental == null ? void 0 : experimental.featureItems.reduce(
      (acc, featureItem2) => {
        if (featureItem2.type === "toggle") {
          acc[featureItem2.slug] = featureItem2;
        }
        return acc;
      },
      {}
    )) != null ? _a : {};
    const featureItem = featureItemsBySlug[featureSlug];
    if (!featureItem) {
      return false;
    }
    return featureItem.type === "toggle";
  };
};
const constructCheckUsageBalance = (subscriptions) => {
  return (usageMeterSlug, refinementParams) => {
    var _a;
    const subscription = (refinementParams == null ? void 0 : refinementParams.subscriptionId) ? subscriptions.find(
      (s) => s.id === refinementParams.subscriptionId
    ) : subscriptions[0];
    if (!subscription) {
      return null;
    }
    const experimental = subscription.experimental;
    const usageMeterBalancesBySlug = (_a = experimental == null ? void 0 : experimental.usageMeterBalances.reduce(
      (acc, usageMeterBalance2) => {
        acc[usageMeterBalance2.slug] = usageMeterBalance2;
        return acc;
      },
      {}
    )) != null ? _a : {};
    const usageMeterBalance = usageMeterBalancesBySlug[usageMeterSlug];
    if (!usageMeterBalance) {
      return null;
    }
    return usageMeterBalance;
  };
};
const constructGetProduct = (catalog) => {
  const productsBySlug = new Map(
    catalog.products.map((product) => [product.slug, product])
  );
  const getProduct = (productSlug) => {
    var _a;
    return (_a = productsBySlug.get(productSlug)) != null ? _a : null;
  };
  return getProduct;
};
const constructGetPrice = (catalog) => {
  const pricesBySlug = new Map(
    catalog.products.flatMap(
      (product) => product.prices.map((price) => [price.slug, price])
    )
  );
  const getPrice = (priceSlug) => {
    var _a;
    return (_a = pricesBySlug.get(priceSlug)) != null ? _a : null;
  };
  return getPrice;
};
export {
  constructCheckFeatureAccess,
  constructCheckUsageBalance,
  constructGetPrice,
  constructGetProduct,
  getBaseURL
};
//# sourceMappingURL=utils.js.map