import { type CancelSubscriptionParams, type CreateCheckoutSessionParams, type CreateSubscriptionParams, type CreateUsageEventParams, type CreateAddPaymentMethodCheckoutSessionParams, type CreateProductCheckoutSessionParams, type BillingWithChecks } from '@flowglad/shared';
import { type CoreCustomerUser, type FlowgladServerSessionParams } from './types';
import { Flowglad as FlowgladNode } from '@flowglad/node';
export declare class FlowgladServer {
    private createHandlerParams;
    private flowgladNode;
    constructor(createHandlerParams: FlowgladServerSessionParams);
    getRequestingCustomerId: () => Promise<string>;
    getSession: () => Promise<CoreCustomerUser | null>;
    getBilling: () => Promise<BillingWithChecks>;
    findOrCreateCustomer: () => Promise<FlowgladNode.Customers.CustomerRetrieveResponse["customer"]>;
    getCustomer: () => Promise<FlowgladNode.Customers.CustomerRetrieveResponse>;
    createCustomer: (params: FlowgladNode.Customers.CustomerCreateParams) => Promise<FlowgladNode.Customers.CustomerCreateResponse>;
    createCheckoutSession: (params: CreateCheckoutSessionParams) => Promise<FlowgladNode.CheckoutSessions.CheckoutSessionCreateResponse>;
    updateCustomer: (params: FlowgladNode.Customers.CustomerUpdateParams) => Promise<FlowgladNode.Customers.CustomerUpdateResponse>;
    createAddPaymentMethodCheckoutSession: (params: CreateAddPaymentMethodCheckoutSessionParams) => Promise<FlowgladNode.CheckoutSessions.CheckoutSessionCreateResponse>;
    createProductCheckoutSession: (params: CreateProductCheckoutSessionParams) => Promise<FlowgladNode.CheckoutSessions.CheckoutSessionCreateResponse>;
    cancelSubscription: (params: CancelSubscriptionParams) => Promise<FlowgladNode.Subscriptions.SubscriptionCancelResponse>;
    createSubscription: (params: Omit<CreateSubscriptionParams, "customerId">) => Promise<FlowgladNode.Subscriptions.SubscriptionCreateResponse>;
    /**
     * Create a usage event for a customer.
     * NOTE: this method makes two API calls, including one to get the customer.
     * If you are to create usages en masse with minimum latency,
     * you should use `FlowgladServerAdmin.createUsageEvent` instead.
     * @param params - The parameters for the usage event.
     * @returns The created usage event.
     */
    createUsageEvent: (params: CreateUsageEventParams) => Promise<FlowgladNode.UsageEvents.UsageEventCreateResponse>;
    getCatalog: () => Promise<FlowgladNode.Catalogs.CatalogRetrieveResponse>;
}
