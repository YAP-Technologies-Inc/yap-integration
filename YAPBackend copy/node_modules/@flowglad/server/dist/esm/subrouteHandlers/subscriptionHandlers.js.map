{"version":3,"sources":["../../../src/subrouteHandlers/subscriptionHandlers.ts"],"sourcesContent":["import { FlowgladActionKey, HTTPMethod } from '@flowglad/shared'\nimport { SubRouteHandler, SubRouteHandlerResultData } from './types'\nimport { FlowgladServer } from '../FlowgladServer'\nimport Flowglad from '@flowglad/node'\n\nexport const cancelSubscription: SubRouteHandler<\n  FlowgladActionKey.CancelSubscription\n> = async (params, flowgladServer: FlowgladServer) => {\n  let error:\n    | { code: string; json: Record<string, unknown> }\n    | undefined\n  let status: number\n  let data: SubRouteHandlerResultData<FlowgladActionKey.CancelSubscription> =\n    {}\n  if (params.method !== HTTPMethod.POST) {\n    error = {\n      code: 'Method not allowed',\n      json: {},\n    }\n    status = 405\n    return {\n      data,\n      status,\n      error,\n    }\n  }\n  let subscription: Flowglad.Subscriptions.SubscriptionCancelResponse\n  try {\n    subscription = await flowgladServer.cancelSubscription(\n      params.data\n    )\n    return {\n      data: subscription,\n      status: 200,\n    }\n  } catch (error) {\n    return {\n      data: {},\n      status: 500,\n      error: {\n        code: 'subscription_cancel_failed',\n        json: {\n          message: (error as Error).message,\n        },\n      },\n    }\n  }\n}\n"],"mappings":";;;AAAA,SAA4B,kBAAkB;AAKvC,MAAM,qBAET,CAAO,QAAQ,mBAAmC;AACpD,MAAI;AAGJ,MAAI;AACJ,MAAI,OACF,CAAC;AACH,MAAI,OAAO,WAAW,WAAW,MAAM;AACrC,YAAQ;AAAA,MACN,MAAM;AAAA,MACN,MAAM,CAAC;AAAA,IACT;AACA,aAAS;AACT,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACA,MAAI;AACJ,MAAI;AACF,mBAAe,MAAM,eAAe;AAAA,MAClC,OAAO;AAAA,IACT;AACA,WAAO;AAAA,MACL,MAAM;AAAA,MACN,QAAQ;AAAA,IACV;AAAA,EACF,SAASA,QAAO;AACd,WAAO;AAAA,MACL,MAAM,CAAC;AAAA,MACP,QAAQ;AAAA,MACR,OAAO;AAAA,QACL,MAAM;AAAA,QACN,MAAM;AAAA,UACJ,SAAUA,OAAgB;AAAA,QAC5B;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;","names":["error"]}