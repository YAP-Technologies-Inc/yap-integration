import { APIResource } from "../core/resource.js";
import { APIPromise } from "../core/api-promise.js";
import { RequestOptions } from "../internal/request-options.js";
export declare class UsageMeters extends APIResource {
    /**
     * Create Usage Meter
     */
    create(body: UsageMeterCreateParams, options?: RequestOptions): APIPromise<UsageMeterCreateResponse>;
    /**
     * Get Usage Meter
     */
    retrieve(id: string, options?: RequestOptions): APIPromise<UsageMeterRetrieveResponse>;
    /**
     * Update Usage Meter
     */
    update(id: string, body: UsageMeterUpdateParams, options?: RequestOptions): APIPromise<UsageMeterUpdateResponse>;
    /**
     * List Usage Meters
     */
    list(query?: UsageMeterListParams | null | undefined, options?: RequestOptions): APIPromise<UsageMeterListResponse>;
}
export interface UsageMeterCreateResponse {
    usageMeter: UsageMeterCreateResponse.UsageMeter;
}
export declare namespace UsageMeterCreateResponse {
    interface UsageMeter {
        id: string;
        /**
         * The type of aggregation to perform on the usage meter. Defaults to "sum", which
         * aggregates all the usage event amounts for the billing period.
         * "count_distinct_properties" counts the number of distinct properties in the
         * billing period for a given meter.
         */
        aggregationType: 'sum' | 'count_distinct_properties';
        catalogId: string;
        createdAt: string;
        createdByCommit: string | null;
        livemode: boolean;
        name: string;
        organizationId: string;
        slug: string;
        updatedAt: string | null;
        updatedByCommit: string | null;
    }
}
export interface UsageMeterRetrieveResponse {
    usageMeter: UsageMeterRetrieveResponse.UsageMeter;
}
export declare namespace UsageMeterRetrieveResponse {
    interface UsageMeter {
        id: string;
        /**
         * The type of aggregation to perform on the usage meter. Defaults to "sum", which
         * aggregates all the usage event amounts for the billing period.
         * "count_distinct_properties" counts the number of distinct properties in the
         * billing period for a given meter.
         */
        aggregationType: 'sum' | 'count_distinct_properties';
        catalogId: string;
        createdAt: string;
        createdByCommit: string | null;
        livemode: boolean;
        name: string;
        organizationId: string;
        slug: string;
        updatedAt: string | null;
        updatedByCommit: string | null;
    }
}
export interface UsageMeterUpdateResponse {
    usageMeter: UsageMeterUpdateResponse.UsageMeter;
}
export declare namespace UsageMeterUpdateResponse {
    interface UsageMeter {
        id: string;
        /**
         * The type of aggregation to perform on the usage meter. Defaults to "sum", which
         * aggregates all the usage event amounts for the billing period.
         * "count_distinct_properties" counts the number of distinct properties in the
         * billing period for a given meter.
         */
        aggregationType: 'sum' | 'count_distinct_properties';
        catalogId: string;
        createdAt: string;
        createdByCommit: string | null;
        livemode: boolean;
        name: string;
        organizationId: string;
        slug: string;
        updatedAt: string | null;
        updatedByCommit: string | null;
    }
}
export interface UsageMeterListResponse {
    data: Array<UsageMeterListResponse.Data>;
    hasMore: boolean;
    total: number;
    currentCursor?: string;
    nextCursor?: string;
}
export declare namespace UsageMeterListResponse {
    interface Data {
        id: string;
        /**
         * The type of aggregation to perform on the usage meter. Defaults to "sum", which
         * aggregates all the usage event amounts for the billing period.
         * "count_distinct_properties" counts the number of distinct properties in the
         * billing period for a given meter.
         */
        aggregationType: 'sum' | 'count_distinct_properties';
        catalogId: string;
        createdAt: string;
        createdByCommit: string | null;
        livemode: boolean;
        name: string;
        organizationId: string;
        slug: string;
        updatedAt: string | null;
        updatedByCommit: string | null;
    }
}
export interface UsageMeterCreateParams {
    usageMeter: UsageMeterCreateParams.UsageMeter;
}
export declare namespace UsageMeterCreateParams {
    interface UsageMeter {
        catalogId: string;
        name: string;
        slug: string;
        /**
         * The type of aggregation to perform on the usage meter. Defaults to "sum", which
         * aggregates all the usage event amounts for the billing period.
         * "count_distinct_properties" counts the number of distinct properties in the
         * billing period for a given meter.
         */
        aggregationType?: 'sum' | 'count_distinct_properties';
    }
}
export interface UsageMeterUpdateParams {
    usageMeter: UsageMeterUpdateParams.UsageMeter;
}
export declare namespace UsageMeterUpdateParams {
    interface UsageMeter {
        id: string;
        /**
         * The type of aggregation to perform on the usage meter. Defaults to "sum", which
         * aggregates all the usage event amounts for the billing period.
         * "count_distinct_properties" counts the number of distinct properties in the
         * billing period for a given meter.
         */
        aggregationType?: 'sum' | 'count_distinct_properties';
        createdAt?: string;
        createdByCommit?: string | null;
        name?: string;
        slug?: string;
        updatedAt?: string | null;
        updatedByCommit?: string | null;
    }
}
export interface UsageMeterListParams {
    cursor?: string;
    limit?: number;
}
export declare namespace UsageMeters {
    export { type UsageMeterCreateResponse as UsageMeterCreateResponse, type UsageMeterRetrieveResponse as UsageMeterRetrieveResponse, type UsageMeterUpdateResponse as UsageMeterUpdateResponse, type UsageMeterListResponse as UsageMeterListResponse, type UsageMeterCreateParams as UsageMeterCreateParams, type UsageMeterUpdateParams as UsageMeterUpdateParams, type UsageMeterListParams as UsageMeterListParams, };
}
//# sourceMappingURL=usage-meters.d.ts.map