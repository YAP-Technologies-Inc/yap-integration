import {
  __async
} from "../chunk-JPRRZPBL.js";
import {
  HTTPMethod,
  updateCustomerSchema
} from "@flowglad/shared";
const getCustomerBilling = (params, flowgladServer) => __async(void 0, null, function* () {
  if (params.method !== HTTPMethod.POST) {
    return {
      data: {},
      status: 405,
      error: {
        code: "Method not allowed",
        json: {}
      }
    };
  }
  const customerBilling = yield flowgladServer.getBilling();
  return {
    data: customerBilling,
    status: 200
  };
});
const findOrCreateCustomer = (params, flowgladServer) => __async(void 0, null, function* () {
  if (params.method !== HTTPMethod.POST) {
    return {
      data: {},
      status: 405,
      error: {
        code: "405",
        json: {
          message: "Method not allowed"
        }
      }
    };
  }
  const user = yield flowgladServer.getSession();
  if (!user) {
    return {
      data: {},
      status: 401,
      error: {
        code: "401",
        json: {
          message: "Unauthorized"
        }
      }
    };
  }
  let customer;
  const requestingcustomerId = yield flowgladServer.getRequestingCustomerId();
  try {
    customer = yield flowgladServer.getCustomer();
  } catch (error) {
    if (error.error.code === "NOT_FOUND") {
      customer = yield flowgladServer.createCustomer({
        customer: {
          email: user.email,
          name: user.name,
          externalId: requestingcustomerId
        }
      });
    }
  }
  if (!customer) {
    return {
      data: {},
      status: 404,
      error: {
        code: "404",
        json: {
          message: `Customer ${requestingcustomerId} not found`
        }
      }
    };
  }
  return {
    data: customer,
    status: 200
  };
});
const updateCustomer = (params, flowgladServer) => __async(void 0, null, function* () {
  if (params.method !== HTTPMethod.POST) {
    return {
      data: {},
      status: 405,
      error: {
        code: "405",
        json: {
          message: "Method not allowed"
        }
      }
    };
  }
  const parsedParams = updateCustomerSchema.parse(params.data);
  const customer = yield flowgladServer.updateCustomer(parsedParams);
  return {
    data: customer,
    status: 200
  };
});
export {
  findOrCreateCustomer,
  getCustomerBilling,
  updateCustomer
};
//# sourceMappingURL=customerHandlers.js.map