"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var serverUtils_exports = {};
__export(serverUtils_exports, {
  getSessionFromNextAuth: () => getSessionFromNextAuth,
  getSessionFromParams: () => getSessionFromParams,
  parseErrorStringToErrorObject: () => parseErrorStringToErrorObject,
  sessionFromSupabaseAuth: () => sessionFromSupabaseAuth
});
module.exports = __toCommonJS(serverUtils_exports);
const getSessionFromNextAuth = (params) => __async(void 0, null, function* () {
  let coreCustomerUser = null;
  const session = yield params.nextAuth.auth();
  if (session == null ? void 0 : session.user) {
    if (params.nextAuth.customerFromAuth) {
      coreCustomerUser = yield params.nextAuth.customerFromAuth(session);
    } else if (!session.user.email) {
      throw new Error(
        "FlowgladError: NextAuth session has no email. Please provide an extractUserIdFromSession function to extract the userId from the session, or include email on your sessions."
      );
    } else {
      coreCustomerUser = {
        externalId: session.user.email,
        name: session.user.name || "",
        email: session.user.email || ""
      };
    }
  }
  return coreCustomerUser;
});
const sessionFromSupabaseAuth = (params) => __async(void 0, null, function* () {
  let coreCustomerUser = null;
  const {
    data: { user }
  } = yield (yield params.supabaseAuth.client()).auth.getUser();
  if (user) {
    coreCustomerUser = {
      externalId: user.id,
      name: user.user_metadata.name || "",
      email: user.email || ""
    };
  }
  return coreCustomerUser;
});
const getSessionFromParams = (params) => __async(void 0, null, function* () {
  let coreCustomerUser = null;
  if ("nextAuth" in params) {
    coreCustomerUser = yield getSessionFromNextAuth(params);
  }
  if ("supabaseAuth" in params) {
    coreCustomerUser = yield sessionFromSupabaseAuth(params);
  }
  return coreCustomerUser;
});
const parseErrorStringToErrorObject = (errorString) => {
  let [errorCode, ...errorJsonParts] = errorString.split(" ");
  if (isNaN(Number(errorCode))) {
    errorCode = "Unknown";
  }
  let errorJson = {};
  try {
    errorJson = JSON.parse(errorJsonParts.join(" "));
  } catch (e) {
    errorJson = {
      message: errorString
    };
  }
  return {
    code: errorCode,
    json: errorJson
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getSessionFromNextAuth,
  getSessionFromParams,
  parseErrorStringToErrorObject,
  sessionFromSupabaseAuth
});
//# sourceMappingURL=serverUtils.js.map