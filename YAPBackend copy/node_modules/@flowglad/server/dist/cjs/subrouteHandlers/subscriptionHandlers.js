"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var subscriptionHandlers_exports = {};
__export(subscriptionHandlers_exports, {
  cancelSubscription: () => cancelSubscription
});
module.exports = __toCommonJS(subscriptionHandlers_exports);
var import_shared = require("@flowglad/shared");
const cancelSubscription = (params, flowgladServer) => __async(void 0, null, function* () {
  let error;
  let status;
  let data = {};
  if (params.method !== import_shared.HTTPMethod.POST) {
    error = {
      code: "Method not allowed",
      json: {}
    };
    status = 405;
    return {
      data,
      status,
      error
    };
  }
  let subscription;
  try {
    subscription = yield flowgladServer.cancelSubscription(
      params.data
    );
    return {
      data: subscription,
      status: 200
    };
  } catch (error2) {
    return {
      data: {},
      status: 500,
      error: {
        code: "subscription_cancel_failed",
        json: {
          message: error2.message
        }
      }
    };
  }
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  cancelSubscription
});
//# sourceMappingURL=subscriptionHandlers.js.map