"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var requestHandler_exports = {};
__export(requestHandler_exports, {
  RequestHandlerError: () => RequestHandlerError,
  createRequestHandler: () => createRequestHandler
});
module.exports = __toCommonJS(requestHandler_exports);
var import_subrouteHandlers = require("./subrouteHandlers");
var import_shared = require("@flowglad/shared");
class RequestHandlerError extends Error {
  constructor(message, status = 400) {
    super(message);
    this.status = status;
    this.name = "RequestHandlerError";
  }
}
const createRequestHandler = (options) => {
  const { flowgladServer, onError, beforeRequest, afterRequest } = options;
  return (input) => __async(void 0, null, function* () {
    try {
      if (beforeRequest) {
        yield beforeRequest();
      }
      const joinedPath = input.path.join("/");
      if (!Object.values(import_shared.FlowgladActionKey).includes(joinedPath)) {
        throw new RequestHandlerError(
          `"${joinedPath}" is not a valid Flowglad API path`,
          404
        );
      }
      const handler = import_subrouteHandlers.routeToHandlerMap[joinedPath];
      if (!handler) {
        throw new RequestHandlerError(
          `"${joinedPath}" is not a valid Flowglad API path`,
          404
        );
      }
      const data = input.method === "GET" ? input.query : input.body;
      const result = yield handler(
        {
          method: input.method,
          data
        },
        flowgladServer
      );
      if (afterRequest) {
        yield afterRequest();
      }
      return {
        status: result.status,
        data: result.data,
        error: result.error
      };
    } catch (error) {
      if (onError) {
        onError(error);
      }
      if (error instanceof RequestHandlerError) {
        return {
          status: error.status,
          error: { message: error.message }
        };
      }
      if (error.message) {
        return {
          status: error.status,
          error: { message: error.message }
        };
      }
      return {
        status: 400,
        error: { message: "Internal server error" }
      };
    }
  });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  RequestHandlerError,
  createRequestHandler
});
//# sourceMappingURL=requestHandler.js.map