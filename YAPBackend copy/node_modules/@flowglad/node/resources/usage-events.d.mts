import { APIResource } from "../core/resource.mjs";
import { APIPromise } from "../core/api-promise.mjs";
import { RequestOptions } from "../internal/request-options.mjs";
export declare class UsageEvents extends APIResource {
    /**
     * Create Usage Event
     */
    create(body: UsageEventCreateParams, options?: RequestOptions): APIPromise<UsageEventCreateResponse>;
    /**
     * Get Usage Event
     */
    retrieve(id: string, options?: RequestOptions): APIPromise<UsageEventRetrieveResponse>;
}
export interface UsageEventCreateResponse {
    usageEvent: UsageEventCreateResponse.UsageEvent;
}
export declare namespace UsageEventCreateResponse {
    interface UsageEvent {
        id: string;
        amount: number;
        /**
         * The billing period the usage belongs to. If the usage occurs in a date that is
         * outside of the current billing period, the usage will still be attached to the
         * current billing peirod.
         */
        billingPeriodId: string | null;
        createdAt: string;
        createdByCommit: string | null;
        customerId: string;
        livemode: boolean;
        priceId: string;
        /**
         * Properties for the usage event. Only required when using the
         * "count_distinct_properties" aggregation type.
         */
        properties: {
            [key: string]: unknown;
        };
        subscriptionId: string;
        /**
         * A unique identifier for the transaction. This is used to prevent duplicate usage
         * events from being created.
         */
        transactionId: string;
        updatedAt: string | null;
        updatedByCommit: string | null;
        /**
         * The date the usage occurred. If the usage occurs in a date that is outside of
         * the current billing period, the usage will still be attached to the current
         * billing peirod.
         */
        usageDate: string;
        usageMeterId: string;
    }
}
export interface UsageEventRetrieveResponse {
    usageEvent: UsageEventRetrieveResponse.UsageEvent;
}
export declare namespace UsageEventRetrieveResponse {
    interface UsageEvent {
        id: string;
        amount: number;
        /**
         * The billing period the usage belongs to. If the usage occurs in a date that is
         * outside of the current billing period, the usage will still be attached to the
         * current billing peirod.
         */
        billingPeriodId: string | null;
        createdAt: string;
        createdByCommit: string | null;
        customerId: string;
        livemode: boolean;
        priceId: string;
        /**
         * Properties for the usage event. Only required when using the
         * "count_distinct_properties" aggregation type.
         */
        properties: {
            [key: string]: unknown;
        };
        subscriptionId: string;
        /**
         * A unique identifier for the transaction. This is used to prevent duplicate usage
         * events from being created.
         */
        transactionId: string;
        updatedAt: string | null;
        updatedByCommit: string | null;
        /**
         * The date the usage occurred. If the usage occurs in a date that is outside of
         * the current billing period, the usage will still be attached to the current
         * billing peirod.
         */
        usageDate: string;
        usageMeterId: string;
    }
}
export interface UsageEventCreateParams {
    usageEvent: UsageEventCreateParams.UsageEvent;
}
export declare namespace UsageEventCreateParams {
    interface UsageEvent {
        amount: number;
        priceId: string;
        subscriptionId: string;
        /**
         * A unique identifier for the transaction. This is used to prevent duplicate usage
         * events from being created.
         */
        transactionId: string;
        /**
         * Properties for the usage event. Only required when using the
         * "count_distinct_properties" aggregation type.
         */
        properties?: {
            [key: string]: unknown;
        } | null;
        /**
         * The date the usage occurred in unix epoch milliseconds. If not provided, the
         * current timestamp will be used.
         */
        usageDate?: number;
    }
}
export declare namespace UsageEvents {
    export { type UsageEventCreateResponse as UsageEventCreateResponse, type UsageEventRetrieveResponse as UsageEventRetrieveResponse, type UsageEventCreateParams as UsageEventCreateParams, };
}
//# sourceMappingURL=usage-events.d.mts.map