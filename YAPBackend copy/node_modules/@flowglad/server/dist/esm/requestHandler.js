import {
  __async
} from "./chunk-JPRRZPBL.js";
import { routeToHandlerMap } from "./subrouteHandlers";
import { FlowgladActionKey } from "@flowglad/shared";
class RequestHandlerError extends Error {
  constructor(message, status = 400) {
    super(message);
    this.status = status;
    this.name = "RequestHandlerError";
  }
}
const createRequestHandler = (options) => {
  const { flowgladServer, onError, beforeRequest, afterRequest } = options;
  return (input) => __async(void 0, null, function* () {
    try {
      if (beforeRequest) {
        yield beforeRequest();
      }
      const joinedPath = input.path.join("/");
      if (!Object.values(FlowgladActionKey).includes(joinedPath)) {
        throw new RequestHandlerError(
          `"${joinedPath}" is not a valid Flowglad API path`,
          404
        );
      }
      const handler = routeToHandlerMap[joinedPath];
      if (!handler) {
        throw new RequestHandlerError(
          `"${joinedPath}" is not a valid Flowglad API path`,
          404
        );
      }
      const data = input.method === "GET" ? input.query : input.body;
      const result = yield handler(
        {
          method: input.method,
          data
        },
        flowgladServer
      );
      if (afterRequest) {
        yield afterRequest();
      }
      return {
        status: result.status,
        data: result.data,
        error: result.error
      };
    } catch (error) {
      if (onError) {
        onError(error);
      }
      if (error instanceof RequestHandlerError) {
        return {
          status: error.status,
          error: { message: error.message }
        };
      }
      if (error.message) {
        return {
          status: error.status,
          error: { message: error.message }
        };
      }
      return {
        status: 400,
        error: { message: "Internal server error" }
      };
    }
  });
};
export {
  RequestHandlerError,
  createRequestHandler
};
//# sourceMappingURL=requestHandler.js.map