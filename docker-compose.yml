version: "3.9"

services:
  frontend:
    build:
      context: ./frontend
      args:
        # Bake prod API base into the bundle
        NEXT_PUBLIC_API_URL: https://api.dev.yapapp.io/api
        NEXT_PUBLIC_PRIVY_APP_ID: ${NEXT_PUBLIC_PRIVY_APP_ID}
        NEXT_PUBLIC_PRIVY_CLIENT_ID: ${NEXT_PUBLIC_PRIVY_CLIENT_ID}
    environment:
      - NODE_ENV=production
      - HOST=0.0.0.0
      - PORT=3000
    command: npm run start
    expose:
      - "3000"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -fsS http://localhost:3000/ >/dev/null"]
      interval: 10s
      timeout: 3s
      retries: 10
    networks: [yapnet]
    restart: unless-stopped

  backend:
    build: ./backend
    environment:
      - NODE_ENV=production
      - HOST=0.0.0.0
      - PORT=4000
      # Use a single connection string in your app (DB_URL)
      - DB_URL=${DB_URL}
      # Optional mail / keys (kept in server .env; not committed)
      - MAILGUN_API_KEY=${MAILGUN_API_KEY}
      - MAILGUN_DOMAIN=${MAILGUN_DOMAIN}
      - MAILGUN_FROM=${MAILGUN_FROM}
      - REPORTS_TO=${REPORTS_TO}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
      - ELEVENLABS_AGENT_ID=${ELEVENLABS_AGENT_ID}
      - TZ=America/Toronto
    depends_on:
      db:
        condition: service_healthy
    expose:
      - "4000"
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -fsS http://localhost:4000/api/health >/dev/null"]
      interval: 10s
      timeout: 3s
      retries: 20
    networks: [yapnet]
    restart: unless-stopped

  db:
    image: postgres:15
    environment:
      - POSTGRES_USER=${PGUSER:-yapuser}
      - POSTGRES_PASSWORD=${PGPASSWORD:-change-me}
      - POSTGRES_DB=${PGDATABASE:-yapdb}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PGUSER:-yapuser} -d ${PGDATABASE:-yapdb}"]
      interval: 5s
      timeout: 3s
      retries: 30
    networks: [yapnet]
    restart: unless-stopped

  nginx:
    image: nginx:1.27
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # Your prod nginx config with the two server blocks
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      # Quiet the default vhost
      - ./nginx/empty.conf:/etc/nginx/conf.d/default.conf:ro
      # Certbot/LE live certs provided by the host
      - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      frontend:
        condition: service_started
      backend:
        condition: service_started
    networks: [yapnet]
    restart: unless-stopped

volumes:
  pgdata:

networks:
  yapnet:
