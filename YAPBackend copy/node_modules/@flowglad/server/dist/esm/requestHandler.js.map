{"version":3,"sources":["../../src/requestHandler.ts"],"sourcesContent":["import { routeToHandlerMap } from './subrouteHandlers'\nimport { FlowgladServer } from './FlowgladServer'\nimport { FlowgladActionKey, HTTPMethod } from '@flowglad/shared'\n\n/**\n * Input for the request handler.\n */\nexport interface RequestHandlerInput {\n  /**\n   * The path of the request.\n   * @example \"/customers/123\" => [\"customers\", \"123\"]\n   */\n  path: string[]\n  /**\n   * The method of the request.\n   * @example \"GET\"\n   */\n  method: HTTPMethod\n  /**\n   * The parsed query parameters of the request.\n   * @example { \"name\": \"John\", \"age\": \"30\" }\n   */\n  query?: Record<string, string>\n  /**\n   * The body of the request.\n   * @example { \"name\": \"John\", \"age\": \"30\" }\n   */\n  body?: unknown\n}\n\nexport interface RequestHandlerOutput {\n  status: number\n  data?: unknown\n  error?: unknown\n}\n\nexport interface RequestHandlerOptions {\n  flowgladServer: FlowgladServer\n  /**\n   * Function to run when an error occurs.\n   * @param error - The error that occurred.\n   */\n  onError?: (error: unknown) => void\n  /**\n   * Side effect to run before the request is processed.\n   * @returns A promise that resolves when the side effect is complete.\n   */\n  beforeRequest?: () => Promise<void>\n  /**\n   * Side effect to run after the request is processed.\n   * @returns A promise that resolves when the side effect is complete.\n   */\n  afterRequest?: () => Promise<void>\n}\n\nexport class RequestHandlerError extends Error {\n  constructor(\n    message: string,\n    public status: number = 400\n  ) {\n    super(message)\n    this.name = 'RequestHandlerError'\n  }\n}\n\nexport const createRequestHandler = (\n  options: RequestHandlerOptions\n) => {\n  const { flowgladServer, onError, beforeRequest, afterRequest } =\n    options\n\n  return async (\n    input: RequestHandlerInput\n  ): Promise<RequestHandlerOutput> => {\n    try {\n      if (beforeRequest) {\n        await beforeRequest()\n      }\n\n      const joinedPath = input.path.join('/') as FlowgladActionKey\n\n      if (!Object.values(FlowgladActionKey).includes(joinedPath)) {\n        throw new RequestHandlerError(\n          `\"${joinedPath}\" is not a valid Flowglad API path`,\n          404\n        )\n      }\n\n      const handler = routeToHandlerMap[joinedPath]\n      if (!handler) {\n        throw new RequestHandlerError(\n          `\"${joinedPath}\" is not a valid Flowglad API path`,\n          404\n        )\n      }\n\n      const data = input.method === 'GET' ? input.query : input.body\n\n      const result = await handler(\n        {\n          method: input.method,\n          data,\n        },\n        flowgladServer\n      )\n\n      if (afterRequest) {\n        await afterRequest()\n      }\n\n      return {\n        status: result.status,\n        data: result.data,\n        error: result.error,\n      }\n    } catch (error) {\n      if (onError) {\n        onError(error)\n      }\n\n      if (error instanceof RequestHandlerError) {\n        return {\n          status: error.status,\n          error: { message: error.message },\n        }\n      }\n      if ((error as any).message) {\n        return {\n          status: (error as any).status,\n          error: { message: (error as any).message },\n        }\n      }\n      return {\n        status: 400,\n        error: { message: 'Internal server error' },\n      }\n    }\n  }\n}\n"],"mappings":";;;AAAA,SAAS,yBAAyB;AAElC,SAAS,yBAAqC;AAqDvC,MAAM,4BAA4B,MAAM;AAAA,EAC7C,YACE,SACO,SAAiB,KACxB;AACA,UAAM,OAAO;AAFN;AAGP,SAAK,OAAO;AAAA,EACd;AACF;AAEO,MAAM,uBAAuB,CAClC,YACG;AACH,QAAM,EAAE,gBAAgB,SAAS,eAAe,aAAa,IAC3D;AAEF,SAAO,CACL,UACkC;AAClC,QAAI;AACF,UAAI,eAAe;AACjB,cAAM,cAAc;AAAA,MACtB;AAEA,YAAM,aAAa,MAAM,KAAK,KAAK,GAAG;AAEtC,UAAI,CAAC,OAAO,OAAO,iBAAiB,EAAE,SAAS,UAAU,GAAG;AAC1D,cAAM,IAAI;AAAA,UACR,IAAI,UAAU;AAAA,UACd;AAAA,QACF;AAAA,MACF;AAEA,YAAM,UAAU,kBAAkB,UAAU;AAC5C,UAAI,CAAC,SAAS;AACZ,cAAM,IAAI;AAAA,UACR,IAAI,UAAU;AAAA,UACd;AAAA,QACF;AAAA,MACF;AAEA,YAAM,OAAO,MAAM,WAAW,QAAQ,MAAM,QAAQ,MAAM;AAE1D,YAAM,SAAS,MAAM;AAAA,QACnB;AAAA,UACE,QAAQ,MAAM;AAAA,UACd;AAAA,QACF;AAAA,QACA;AAAA,MACF;AAEA,UAAI,cAAc;AAChB,cAAM,aAAa;AAAA,MACrB;AAEA,aAAO;AAAA,QACL,QAAQ,OAAO;AAAA,QACf,MAAM,OAAO;AAAA,QACb,OAAO,OAAO;AAAA,MAChB;AAAA,IACF,SAAS,OAAO;AACd,UAAI,SAAS;AACX,gBAAQ,KAAK;AAAA,MACf;AAEA,UAAI,iBAAiB,qBAAqB;AACxC,eAAO;AAAA,UACL,QAAQ,MAAM;AAAA,UACd,OAAO,EAAE,SAAS,MAAM,QAAQ;AAAA,QAClC;AAAA,MACF;AACA,UAAK,MAAc,SAAS;AAC1B,eAAO;AAAA,UACL,QAAS,MAAc;AAAA,UACvB,OAAO,EAAE,SAAU,MAAc,QAAQ;AAAA,QAC3C;AAAA,MACF;AACA,aAAO;AAAA,QACL,QAAQ;AAAA,QACR,OAAO,EAAE,SAAS,wBAAwB;AAAA,MAC5C;AAAA,IACF;AAAA,EACF;AACF;","names":[]}